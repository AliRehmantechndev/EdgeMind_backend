generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  fullName          String?
  projects          Project[]
  datasets          Dataset[]
  annotationClasses AnnotationClass[]
  annotations       Annotation[]
  datasetImages     DatasetImage[]
  trainingRuns      TrainingRun[]

  @@map("users")
}

model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  annotationGroup String?
  features        String[]      @default([])
  isPublic        Boolean       @default(true)
  projectType     String        @default("object_detection")
  datasets        Dataset[]
  trainingRuns    TrainingRun[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Dataset {
  id               String            @id @default(cuid())
  name             String
  description      String?
  projectId        String
  userId           String
  totalSize        BigInt            @default(0)
  totalFiles       Int               @default(0)
  status           String            @default("ready")
  uploadType       String            @default("individual")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  annotationClasses AnnotationClass[]
  annotations      Annotation[]
  datasetImages    DatasetImage[]
  trainingRuns     TrainingRun[]

  @@map("datasets")
}

model AnnotationClass {
  id          String       @id @default(cuid())
  name        String
  color       String
  datasetId   String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  dataset     Dataset      @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  annotations Annotation[]

  @@unique([name, datasetId])
  @@map("annotation_classes")
}

model Annotation {
  id         String          @id @default(cuid())
  classId    String
  imageId    String
  datasetId  String
  userId     String
  data       Json            // Stores annotation coordinates and type
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  annotationClass AnnotationClass @relation(fields: [classId], references: [id], onDelete: Cascade)
  dataset    Dataset         @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@map("annotations")
}

model DatasetImage {
  id        String   @id @default(cuid())
  filename  String
  datasetId String
  userId    String
  size      BigInt   @default(0)
  mimeType  String?
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dataset   Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@map("dataset_images")
}

model TrainingRun {
  id           String   @id @default(cuid())
  userId       String
  projectId    String
  datasetId    String
  datasetName  String
  modelType    String
  epochs       Int
  status       String   @default("pending") // pending, running, completed, failed
  progress     Float?   @default(0)
  currentEpoch Int?     @default(0)
  zipPath      String?  // Path in MinIO bucket
  metrics      Json?    // Training metrics (mAP, precision, recall, etc.)
  config       Json?    // Training configuration
  message      String?  // Status message
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  dataset      Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)

  @@map("training_runs")
}
