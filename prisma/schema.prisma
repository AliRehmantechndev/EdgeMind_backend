generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  fullName          String?
  annotationClasses AnnotationClass[]
  annotations       Annotation[]
  datasetImages     DatasetImage[]
  datasets          Dataset[]
  projects          Project[]
  trainingRuns      TrainingRun[]

  @@map("users")
}

model Project {
  id              String        @id @default(cuid())
  name            String
  description     String?
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  annotationGroup String?
  features        String[]      @default([])
  isPublic        Boolean       @default(true)
  projectType     String        @default("object_detection")
  datasets        Dataset[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingRuns    TrainingRun[]

  @@map("projects")
}

model Dataset {
  id                String            @id @default(cuid())
  name              String
  description       String?
  projectId         String
  userId            String
  totalSize         BigInt            @default(0)
  totalFiles        Int               @default(0)
  status            String            @default("ready")
  uploadType        String            @default("individual")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  annotationClasses AnnotationClass[]
  annotations       Annotation[]
  datasetImages     DatasetImage[]
  project           Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingRuns      TrainingRun[]

  @@map("datasets")
}

model AnnotationClass {
  id          String       @id @default(cuid())
  name        String
  color       String
  datasetId   String
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dataset     Dataset      @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  annotations Annotation[]

  @@unique([name, datasetId])
  @@map("annotation_classes")
}

model Annotation {
  id              String          @id @default(cuid())
  classId         String
  imageId         String
  datasetId       String
  userId          String
  data            Json
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  annotationClass AnnotationClass @relation(fields: [classId], references: [id], onDelete: Cascade)
  dataset         Dataset         @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("annotations")
}

model DatasetImage {
  id        String   @id @default(cuid())
  filename  String
  datasetId String
  userId    String
  size      BigInt   @default(0)
  mimeType  String?
  width     Int?
  height    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dataset   Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dataset_images")
}

model TrainingRun {
  id           String   @id @default(cuid())
  userId       String
  projectId    String
  datasetId    String
  datasetName  String
  modelType    String
  epochs       Int
  status       String   @default("pending")
  progress     Float?   @default(0)
  currentEpoch Int?     @default(0)
  zipPath      String?
  metrics      Json?
  config       Json?
  message      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  dataset      Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("training_runs")
}
